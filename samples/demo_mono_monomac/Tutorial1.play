package 
{
	import com.adobe.utils.AGALMiniAssembler;
	import com.adobe.utils.PerspectiveMatrix3D;
	
	import flash.display.Sprite;
	import flash.display.Stage3D;
	import flash.display.StageAlign;
	import flash.display.StageScaleMode;
	import flash.display3D.Context3D;
	import flash.display3D.Context3DProgramType;
	import flash.display3D.Context3DRenderMode;
	import flash.display3D.Context3DVertexBufferFormat;
	import flash.display3D.IndexBuffer3D;
	import flash.display3D.Program3D;
	import flash.display3D.VertexBuffer3D;
	import flash.events.Event;
	import flash.geom.Rectangle;
	
	[SWF(backgroundColor="#000000", frameRate="60", width="800", height="600")]
	public class Tutorial1 extends Sprite
	{
		// Context 3D instance
		private var __c3dContext:Context3D;
		
		// Vertex and index buffer instances
		private var __i3dBuffer:IndexBuffer3D;
		private var __v3dBuffer:VertexBuffer3D;
		
		private var vertexShader:Array =
			[
			 "m44 vt0, va0, vc0",
			 "mov op, vt0"
			 ];
		
		private var fragmentShader:Array =
			[
			 "mov oc, fc0"
			 ];
		
		public function Tutorial1()	{
			stage.scaleMode = StageScaleMode.NO_SCALE;
			stage.align = StageAlign.TOP_LEFT;
			
			var stage3D:Stage3D = stage.stage3Ds[0];
			stage3D.addEventListener(Event.CONTEXT3D_CREATE, onContextInitialized);
			stage3D.requestContext3D(Context3DRenderMode.AUTO);
			stage3D.viewPort = new Rectangle(0, 0, stage.stageWidth, stage.stageHeight);
		}
		
		private function onContextInitialized(e:Event):void {
			// Get the stage3D instance from the event
			var stage3D:Stage3D = e.target as Stage3D;
			// Check the created context 3D instance
			__c3dContext = stage3D.context3D;
			
			// Configure back buffer
			//__c3dContext.configureBackBuffer(800, 600, 2, true);		
			
			//__c3dContext.enableErrorChecking = true;
			// Create program 3D instance for shader
			var program:Program3D = __c3dContext.createProgram();
			// Assemble vertex shader from its code
			var vertexAssembler:AGALMiniAssembler = new AGALMiniAssembler();
			vertexAssembler.assemble(Context3DProgramType.VERTEX, vertexShader.join("\n"));
			// Assemble framgent shader from its code
			var fragmentAssembler:AGALMiniAssembler = new AGALMiniAssembler();
			fragmentAssembler.assemble(Context3DProgramType.FRAGMENT, fragmentShader.join("\n"));
			// Upload vertex/fragment shader to our program
			program.upload(vertexAssembler.agalcode, fragmentAssembler.agalcode);
			// Set the program instance as currently active program
			__c3dContext.setProgram(program);
			
			// Create index buffer
			__i3dBuffer = __c3dContext.createIndexBuffer(3);
			// Upload index buffer from predefined values
			
			
			__i3dBuffer.uploadFromVector(new <uint>[0, 1, 2], 0, 3);
			
			// Create vertex buffer
			__v3dBuffer = __c3dContext.createVertexBuffer(3, 3);
			// Upload vertex buffer from predefined values
			__v3dBuffer.uploadFromVector(new <Number>[
			                                          -1, -1, 5, 
			                                          1, -1, 5, 
			                                          0,  1, 5], 0, 3);
			// Set vertex buffer, this is what we access in vertex shader register va0
			__c3dContext.setVertexBufferAt(0, __v3dBuffer, 0, Context3DVertexBufferFormat.FLOAT_3);
			
			// Create our projection matrix
			var projection:PerspectiveMatrix3D = new PerspectiveMatrix3D();
			// Use a helper function to set up the projection
			projection.perspectiveFieldOfViewLH(45*Math.PI/180, 1.2, 0.1, 512);
			// Set the projection matrix as a vertex program constant, this is what we access in vertex shader register vc0
			__c3dContext.setProgramConstantsFromMatrix(Context3DProgramType.VERTEX, 0, projection, true);
			// Set the out color for our polygon as fragment program constant, this is what we access in fragment shader register fc0
			__c3dContext.setProgramConstantsFromVector(Context3DProgramType.FRAGMENT, 0, new <Number>[1, 1, 1, 0]);
			// Hook up enter frame event where we will do our rendering
			addEventListener(Event.ENTER_FRAME, onRenderFrame);
		}
		
		private function onRenderFrame(e:Event):void {
			// Clear up the context
			__c3dContext.clear(0, 0, 0, 1);
			// Draw the index buffer
			__c3dContext.drawTriangles(__i3dBuffer, 0, 1);
			// Present it
			__c3dContext.present();
		}
	}
}